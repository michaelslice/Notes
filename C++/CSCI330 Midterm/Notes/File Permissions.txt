File Permissions

Access Modes read(r), write(w), execute(x)

Access Categories user(u), group(g), others(o)

How to see permissions on a file

ls -l

user - group - other
-rw----r-------r----

User has read and write access
Group has read access
Other has read access

chmod - Change file permissions 
	chmod [option] octal file
	chmod [option] symbolic file

chown - Command can be used to change ownership
	

Change permissions symbolic mode

For whom?
u - For user who owns the file
g - For group
o - For others

a or ugo - For all three 

Do what?
+ - For add 
- - For remove
= - For assign set to

For what types of access
r - For read
w - For write
x- For execute

Examples of Symbolic Mode

chmod u-w file.txt
chmod u+W file.txt
chmod u+x script.sh
chmod g-w file.txt
chmod o-rw file.txt
chmod ug=rwx play.cc

Change permissions octal mode

read = 4
write = 2
execute = 1

Example Set Mode of file.txt
- Read, write, and execute permissions to owner
- Read and execute permissions to group
- Execute permissiosn to others

Symbolic Mode:
	chmod u=rww, g=rx, o = x file.txt

Octal Mode:
	chmod 751


DIFFERENT FILE PERMISSIONS

SUID - When a file is run with SUID permissions it runs with the privleges of the user who owns the file.
	u+s : add SUID
	u-s : remove SUID

SGID - When a file is run with SGID it runs with the privileges of the group that owns the file.
	g+s : add SGID
	g-s : remove SGID


-s : Add SUID and SGID
+t : add sticky bit

umask - Command that is used to set default permissions for newly 
created files and directories. It stands for user file creation mask
helps determine which permissions are automatically denied when a file or directory is created



