Docker Compose 
	Allows you to define and run multiple services and applications that belong together in one environment 
	Its a tool for defining and running multi-container Docker applications
Configuration:
	You use a single YAML file to configure and maintain your application's services
	With a single command, you create and start all the services from your configuration
Example:
	If you have 10 containers you can use Docker Compose to write a structured file with all the 	run commands and define a configuration there

Compose.yml:
	version 3.1 = version of docker compose
	services: List all services you want to run
	ports: Where you define the port mappings, {Host}{Container}
	environment: Environment variables
	
Network Configuration?
	By default, Compose sets up a single network for your app
	Communication via container name

Run Docker Compose:
	docker-compose -f turing-services.yaml up

Detchaed Mode:
	Starts the containers in the background and leaves them running
	docker-compose -f turing-services.yaml up -d 

Docker Stop Commands:
	docker stop container-id-number

Docker Stop Container Commands:
	Stops containers and removes container networks, volumes and images created by "up"
	docker-compose -f turing-services.yaml down

Containers are ephemeral:
	By default, no persistence
	All data is gone, when containers are removed
	
Volumes:
	Are the mechanism for persisting data generated by and used by the containers

You want to stop and re-start the containers only:
	Stopping containers will keep the data 

Docker Start Container Command:
	docker-compose -f turing-services.yaml start

DO NOT HARD CODE SENSITIVE DATA

ENVIRONMENT VARIABLES:
	${MONGO_DB_API_KEY}

Use Secrets in Docker Compose:
	"Secrets" is an even better way to use secrets without having to use environment variables

Main Use Case of Docker Compose:
	Central Place: To define and manage services (containers) that make up your app
	So they can run together in an isolated environment
	Easy to run and clean entire app
	