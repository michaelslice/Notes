Django Models

Models in Django define the structure and behavior of data stored in a database. They are represented as Python classes that subclass 'Django.db.models.model' 


1. Defining Models
	Models are defined in Django apps by creating a python class that inherits from 
	'Django.db.models.model'. Each class attribute represents a database field

	from Django.db import models

	class MyModel(models.Model):
		field1 = model.CharField(max_length=100)
		field2 = model.IntegerField()
		field3 = models.DateTimeField(auto_now_add=True)

		def __str__(self):
			return self.field1


2. Field Types
	Django provides field types like CharField, IntegerField, DateTimeField, ForeignKey, to 	define different types of data and relationships between models


3. Database Relationships
	One-to-Many: Use ForeignKey to define relationships where each instance of one model (the many side) relates to one instance of another model (the other side)

	class Author(models.Model):
		name = models.CharField(max_length=100)

	class Book(models.Model):
		title= = models.CharField(max_length=100)
		author = models.ForeignKey(Author, on_delete=models.CASCADE)

	
	Many-to-Many: Use ManyToManyField to define relationships where instances of one 	model can relate to multiple instances of another model and vice versa 

	class Tag(model.Model):
		name = models.CharField(max_length=50)
		
	class Article(models.Model):
		title = models.CharField(max_length=100)
		tags = models.ManyToManyField(Tag)

4. Model Methods
	You can define methods within your model classes to encapsulate business logic related to the models data

	class MyModel(models.Model):
    		# fields definition

   	 def custom_method(self):
   	     	# Method logic here
        	return something
	
5. Meta Options
	Use class Meta inside a model to specify metadata about the model such as ordering, database table name, or unique contraints

	class MyModel(models.Model):
		class Meta:
			ordering = ['-field2']

6. Model Manager
	Model managers (objects by default) allow you to retrive, create, update, and delete objects in the database. You can define custom managers to add extra methods for querying data

	class MyModelManager(models.Manager):
    		def get_queryset(self):
        	return super().get_queryset().filter(some_field=True)

	class MyModel(models.Model):
    		# fields definition
    		objects = MyModelManager()  # Custom manager

7. Querying Data
	Use Django OR< (Object-Relational Mapping) to query data from your models using methods like filter(), get(), all(), exclude(), etc

	queryset = MyModel.objects.filter(field1='value')

8. Signals
	Django signals allow certain senders to notify a set of receivers when certain actions have taken place. For example, post_save signal can trigger actions after an object is saved.

	from django.db.models.signals import post_save
	from django.dispatch import receiver
	from .models import MyModel

	@receiver(post_save, sender=MyModel)
	def my_model_post_save(sender, instance, created, **kwargs):
    		if created:
        		print('New instance of MyModel created:', instance)
