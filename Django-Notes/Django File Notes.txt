Django app features 

In Django, every app typically has the following components:

Models (models.py): This file contains the data models for your app, defining the structure of the database tables.

Views (views.py): This file contains the view functions or class-based views that handle requests and return responses.

URLs (urls.py): This file maps URLs to views, defining the URL routing for the app.

Templates: A directory containing HTML files that are rendered by views to create the user interface.

Static Files: A directory for storing static assets like CSS, JavaScript, and images.

Migrations: A directory that contains database migration files generated by Djangoâ€™s migration system.

Admin (admin.py): This file registers models to be managed via the Django admin interface.

Apps Configuration (apps.py): This file contains the configuration for the app, typically used to define application-specific settings.

Tests (tests.py): This file contains test cases to verify that your app works as expected.

Forms (forms.py): This file (optional) is used for defining forms and form handling in the app.

Signals (signals.py): This file (optional) is used for setting up signal handlers.

A minimal Django app might not have all these files, but these are common components you will encounter in most Django apps.


GET: Retrieves a representation of a resource.
HEAD: Asks for a response identical to a GET request but without the response body.
POST: Submits an entity to a resource, often causing a change in state.
PUT: Replaces all current representations of the target resource with the request payload.