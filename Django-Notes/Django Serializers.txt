Django Serializers

Serializers allow complex data such as query sets and model instances to be converted into native Python datatypes that can be easily rendered into JSON, they also provide deserialization allowing for parsed data to be converted back into complex types after first validating the incoming data.

1. Type of Serializers
	Declaring a serializer looks very similar to declaring a form:

	from rest_framework import serializers

	class CommentSerializer(serializers.Serializer):
    		email = serializers.EmailField()
    		content = serializers.CharField(max_length=200)
    		created = serializers.DateTimeField()

2. Serializing Objects
	We can use CommentSerializer to serialize a comment or list of comments Again using the Serializer class 

	serializer = CommentSerializer(comment)
	serializer.data
		# {'email': 'leila@example.com', 'content': 'foo bar', 'created': 			'2016-01-27T15:17:10.375877'}

At this point we've translated the model instance into Python native datatypes. To finalise the serialization process we render the data into json.
	from rest_framework.renderers import JSONRenderer

	json = JSONRenderer().render(serializer.data)
	json
	# b'{"email":"leila@example.com","content":"foo bar","created":"2016-01-27T15:17:10.375877"}'

