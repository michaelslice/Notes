Django Model Notes

from Django.db import models

class MyModel(models.Model):
	field_name = models.FieldType()
	
primary_key: If True, this field is the primary key for the model, if you don't specify primary_key=True for any fields in your model Django will automatically add an IntegerField to hold the primary key 

unique: If True this field must be unique through the table

Each model requires exactly one field to have primary_key=True,(either explicitly or automatically added)

2. Field Types
CharField: For short to mid-sized strings
TextField: For large text
IntegerField: For ints
FloatField: For floating-point numbers
BooleanField: For bools
DateField & DateTimeField: For dates and date-time values
ForeignKey: For defining a many-to-one relationship
OneToOneField: For defining a one-to-one relationship

3. Meta Options
Meta options allow you to customize model behavior

verbose_name: Human-readable name for the object
ordering: Default ordering for model instances
db_table: Custom database table name

4. Database Migrations
Migrations are Django's way of propagating changes you make to your models into the database schema

python manage.py makemigrations: Create new migration based on changes to models
python manage.py migrate: Apply migrations to the database

5. Querying the Database
Django's ORM provides a functionality to query the database

MyModel.objects.all(): Retrive all instances
MyModel.objects.filter(field_name='value'): Filter for instances
MyModel.objects.get(pk=1): Retrieve a single instance by primary key

6. Relationships

ForeignKey ManyToManyField and OneToOneField require the first argument to a model class, so use the verbose_name keyword argument

poll = models.ForeignKey(
    Poll,
    on_delete=models.CASCADE,
    verbose_name="the related poll",
)
sites = models.ManyToManyField(Site, verbose_name="list of sites")
place = models.OneToOneField(
    Place,
    on_delete=models.CASCADE,
    verbose_name="related place",
)


Many-To-One-Relationship:

To define a many to one relationship use Django.db.model.ForeignKey. You use it just like any other Field type: by including it as a class attribute of your model.

ForeignKey: Requires a positional argument: the class to which the model is related

Example: If a Car model has a Manufacturer that is a Manufacturer makes multiple cars but each Car only has one Manufacturer--- use the following definitions

class Manufacturer(models.Model):
    # ...
    pass


class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)


Many-To-Many-Relationships:

To define a many to many relationship, use ManyToManyField. You use it just like any other Field type: By including it as a class attribute of your model
ManyToManyField requires a positional argument the class to which the model is created

Example: If a Pizza has multiple Topping objects -- that is a Topping can be on multiple pizzas and each Pizza has multiple toppings can be represented like so...

class Topping(models.Model):
    # ...
    pass


class Pizza(models.Model):
    # ...
    toppings = models.ManyToManyField(Topping)

7. Querying Datasets

# Find all the groups with a member whose name starts with 'Paul'
>>> Group.objects.filter(members__name__startswith="Paul")
<QuerySet [<Group: The Beatles>]>

# Find all the members of the Beatles that joined after 1 Jan 1961
>>> Person.objects.filter(
...     group__name="The Beatles", membership__date_joined__gt=date(1961, 1, 1)
... )
<QuerySet [<Person: Ringo Starr]>


    