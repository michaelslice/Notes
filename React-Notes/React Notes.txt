Components: A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.

Parent Component: House component

Child Component: Door component

Props(properties): Props are used to pass data from a parent component to a child component. Props are like arguments you pass to a function

useState(): Used to manage state, for current state and updating state, state is like a components memory it lets a component keep track of some information and change it in response to interactions

Render A List: Use a for loop, or the map function

export default: Specifies the main component file

CAN BE USED TO ALLOW THE ABILITY TO CLICK AND LOCATE TO A NEW PAGE
 <Link to="/submission">

IN IGAIT THE LOGIN PAGE WILL DICTATE WHERE YOU LOAD

HOW DOES RENDERING WORK?

Using the Virtual Dom:

What is the DOM?
    Document Object Model

React Rendering Steps

    1. State Changed: Update VDOM
    2. React "diffs": If there is a change react will update the UI
    3. Reconciliation with the DOM

Event Handling:
    Clicks, onClick={handleClick}
    Mouse movements, onChange={handleChange}
    Keyboard events, onSubmit={handleSubmit}

How to Manage Data?

    useState(), const [likes, setLikes] = useState(0)
    useReducer(), 


EVERY REACT HOOK EXPLAINED

State Management:
    useState(): Good for managing state 
        const [age, setAge] = useState(0)
    useReducer(): Good for more complex state management 
        const [count, dispatch] = useReducer(reducer, 0)
    useSyncExternalStore():  

Context Hooks:
    useContext(): Reads the context values 

Transition Hooks:
    useTransition(): Transition hooks used to specify that certain updates are non-urgent, good for heavy computations 
    useDeferredValue(): Lets you defer updates to keep your app responsive

Ref Hooks:
    useRef(): Refs let us "remember" data like useState but does not trigger rerender 
    useImperativeHandle(): Type of ref hook, when you need to forward a ref

Random Hooks:
    useDebugValue(): Use if you use React DevTools
    useId(): Creates unique id when called

Performance Hooks:
    useMemo(): Hook made to improve app performance, uses memoization to "remember" values
    useCallBack(): Similair to useMemo, for callback functions that are passed down to child functions  

Effect Hooks:
    Types of Effects: 1. Event Based(button click), 2. Render-Based(fetching data)
    useEffect(): When any value in count changes, useEffect() will run and update title
        const [count, setCount] = useState(0);
        useEffect(() => {
            document.title = 'you clicked ${count} times'
        }, [count])
    useLayoutEffect(): Runs synchronous
    useInsertionEffect(): Runs before any effect hook

React 19 Hooks:
    useFormStatus()
    useFormState()
    useOptimistic
