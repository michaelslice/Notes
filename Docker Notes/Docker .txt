Docker: 
	Virtualization software, that makes developing and deploying applications much easier.
	Packages application with all the necessary dependencies configuration, system tools and runtime.

Development Process With Containers: 
	Start service as a docker container using 1 Docker command, command is the same for all OS, the command is the same for all services. Docker standardizes process of running any 	service on any local dev environment

Deployment Process With Containers: 	
	Packages together configuration, app source code, dependencies into the Artifact of Docker

Virtual Machine Vs. Docker Container

How Does Docker Run Its Containers

How an OS is made up?
	2 main layers
	OS Kernel : Communicates with software & hardware components, CPU, Memory, Storage, etc 
	OS Applications Layer

	Docker virtualizes the applications layer

Virtual Machine virtualizes the applications layer, and the OS Kernel

	Size: Docker images much smaller. couple of MB
	Speed: Containers take seconds to start
	Compatibility: Compatible only with Linux distros

	Size: VM images, couple of GB
	Speed: VMs take minutes to start
	Compatibility: VM is compatible with all OS

Docker Desktop Includes

Docker Engine:
	A server with a long running daemon process "dockerd"
	Manages images & containers
Docker CLI-Client
	Command Line Interface("docker") to interact with Docker Server
	Execute Docker commands to start/stop/..containers
GUI Client
	To manage your containers and images with a graphical user interface

Docker Images Vs. Docker Containers 

Docker Image
	An executable application artifact
	Includes app source code, but also complete environment configuration
	Add environment variables, create directories, files, etc
	Immutable template that defines how a container will be realized
Includes
	Application: JS app
	Any services needed: node, npm
	OS Layer: Linux

Docker Containers
	Actually starts the application
	A running instance of an image
	Thats when the container environment is created

Docker Commands
	docker build{path} = Build a Docker image from a Dockerfile	
	-t or --tag = Sets a name and optionally a tag in the "name:tag" format	
	docker images: List of all docker images locally
	docker ps: List running containers
	docker run {name}:{tag} = Creates a container from given image and starts it, always creates a new container
	docker logs{container} = View logs from service running inside the container. (which are present at the time of execution)
	docker stop{container} = Stop one or more running containers 
	-p or --publish = Publish a container's port to the host
	-p{HOST_PORT}:{CONTAINER_PORT} = Expose container to localhost 
	--name = Assign a name to the container

Docker Registries
	A storage and distribution system for Docker images
	Official images available from applications like Redis, Mongo, Postgres, etc
	Offical images are maintained by the software authors or in collaboration with the Docker community
DockerHub
	Docker hosts one of the biggest Docker Registry, called "Docker Hub"

Container Port Vs. Host Port

	Application inside container runs in an isolated Docker network
	This allows us to run the same app running on the same port multiple times
	We need to expose the container port to the host (the machine the container runs on)

Port Binding: 
	Bind the container's port to the host's port to make the service available to the outside world

Public and Private Docker Registries

Public:
	Docker Hub: Largest public registry
	Anyone can search and download docker images

Private:
	You need to authenticate before accessing the registry
	All big cloud provider offer private registries: Amazon ECR, Google Container Registry, etc

Registry Vs. Repository

Docker Registry:
	A service providing storage
	Can be hosted by a third party, like AWS(AWS ECR) or by yourself
	Collection of repositories

Docker Repository:
	Collection of relate images with same name but different versions

Dockerfile Create Own Images

Dockerfile - Build Instruction:
	build-> image ->run container

	Dockerfile: Is a text document that contains commands to assemble an image
	Docker can then build an image by reading those instructions

Structure of Dockerfile:
	Dockerfiles start from a parent image or "base image"
	It's a Docker image that your image is based on

From:
	Dockerfiles must begin with a FROM instruction
	Build this image from the specified image

RUN: 
	Will execute any command in a shell inside the container environment

host env -> container env:
	Linux Operating System
	Node and npm installed
	Copy application files from host into the container
	Executing "npm install", to install dependencies

COPY:
	Copies files or directories from <src> and adds them to the filesystem of the container at the path <dest>
	While "RUN" is executed in the container, "COPY" is executed on the host
	COPY package.json /app/ : COPY <src> on our machine to <dest> in the container
	/app/ : The / at the end means docker will create the folder if it does not exist

WORKDIR:
	Sets the working directory for all following commands

CMD:
	The instruction that is to be executed when a Docker container starts
	There can only be one "CMD" instruction in a Dockerfile



